package com.kairos.planning.rules;
    dialect "java"
//import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.optaplanner.core.api.score.buildin.bendablelong.BendableLongScoreHolder;
import com.kairos.planning.domain.*; 
global BendableLongScoreHolder scoreHolder;
//****************Impossible  constraints*************
rule "Skill requirements"
salience 20
    when
        Task( (missingSkillCount > 0 && $missingSkillCount : missingSkillCount))
    then
        scoreHolder.addHardConstraintMatch(kcontext,0,  -  $missingSkillCount);
end
rule "tasksChain for time"
salience 20
    when
        $task: Task (previousTaskOrEmployee instanceof Task  && $prevTask:previousTaskOrEmployee && !$task.isAfter((Task)$prevTask))
    then
        scoreHolder.addHardConstraintMatch(kcontext,1,-100);
end
rule "task timings in sla boundries"
salience 20
    when
        $task: Task (previousTaskOrEmployee instanceof Task  && $prevTask:previousTaskOrEmployee && !$task.isPlannedInPossibleInterval())
    then
        scoreHolder.addHardConstraintMatch(kcontext,2,-10);
end

rule "Employees use same vehicle same time"
salience 20
    when
        $employee: Employee ($id:id && vehicle!=null && $vehicle:vehicle)
        Employee (vehicle!=null && vehicle==$vehicle && id!=$id&& workIntervalOverlapsWithSameVehicle($employee))
    then
        scoreHolder.addHardConstraintMatch(kcontext,3,- 10);
end


//****************Hard constraints*************

rule "Employee availability"
salience 10
    when
        $task:Task(employee!=null &&  employee.getVehicle()!=null&& !canAssignedEmployeeWork())
    then
        //scoreHolder.addHardConstraintMatch(kcontext,3,  - (($task.getEmployee().getAvailableMinutes()==0l?0l:100l)+$task.getDurationIncludingArrivalTime()));
        //scoreHolder.addHardConstraintMatch(kcontext,3,  - ($task.getEmployee().getAvailableMinutes()==0l?1l:$task.getDurationIncludingArrivalTime()));
        if($task.getEmployee().getAvailableMinutes()>0l){
            scoreHolder.addHardConstraintMatch(kcontext,4,  - $task.getMinutesExceedingAvailability());
        }else{
            scoreHolder.addHardConstraintMatch(kcontext,4,  - 1);
            //scoreHolder.addSoftConstraintMatch(kcontext,0,  - $task.getMinutesExceedingAvailability());
        }


end
rule "Employee Reach Back"
salience 10
    when
        $task:Task(employee!=null &&  employee.getVehicle()!=null&& !canAssignedEmployeeReachBack())
    then
        //scoreHolder.addHardConstraintMatch(kcontext,4,  - (($task.getEmployee().getAvailableMinutes()==0l?0l:100l)+$task.getTimeToReachBackUnit()));
       // scoreHolder.addHardConstraintMatch(kcontext,4,  - ($task.getEmployee().getAvailableMinutes()==0l?1l:+$task.getMinutesExceedingAvailabilityForReachingUnit()));
       if($task.getEmployee().getAvailableMinutes()>0l){
           scoreHolder.addHardConstraintMatch(kcontext,5,  - $task.getMinutesExceedingAvailabilityForReachingUnit());
       }else{
           scoreHolder.addHardConstraintMatch(kcontext,5,  - 1);
           // scoreHolder.addSoftConstraintMatch(kcontext,1,  - $task.getMinutesExceedingAvailabilityForReachingUnit());
       }
end

rule "employee Un-assigned"
salience 5
    when
        Task(employee==null)
    then
        scoreHolder.addHardConstraintMatch(kcontext,6,  - 1);
end

rule "Employee Un-assigned"
salience 5
    when
        Task(employee!=null && employee.getVehicle()==null)
    then
        scoreHolder.addHardConstraintMatch(kcontext,7,  - 1);
end

rule "Vehicle skill"
salience 6
    when
        Task(employee!=null && employee.getVehicle()!=null && $missingVehicleSkill:employee.getMissingSkillCountForVehicle())
    then
        scoreHolder.addHardConstraintMatch(kcontext,9,  - $missingVehicleSkill);
end




//****************Soft constraints*************

rule "waitingTime"
salience 3
    when
        $task : Task(previousTaskOrEmployee != null)
    then
        scoreHolder.addSoftConstraintMatch(kcontext,2,- $task.getWaitingMinutes());
end


rule "distanceToPreviousTaskLocation"
salience 3
    when
        $task : Task(previousTaskOrEmployee != null, $distanceFromPreviousTaskOrEmployee : distanceFromPreviousTaskOrEmployee)
    then
        scoreHolder.addSoftConstraintMatch(kcontext,3,- $distanceFromPreviousTaskOrEmployee);
end

//This is just for phase 1 CH so no same employees are assigned to one vehicle
rule "Employees use same vehicle"
salience 3
    when
        $employee: Employee ($id:id && vehicle!=null && $vehicle:vehicle)
        Employee (vehicle!=null && vehicle==$vehicle && id!=$id)
    then
        scoreHolder.addSoftConstraintMatch(kcontext,4,- 1);
end
/*
rule "AllVehicleUsage"
salience 1
    when
    Task ($vehicle : vehicle)
    accumulate(
            $task : Task(
                vehicle == $vehicle);
            $totalVehicleUsed : count($task);
            $totalVehicleUsed == 0
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext,2, -1);
end
*/