package com.kairos.planning.rules;
    dialect "java"
//import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.optaplanner.core.api.score.buildin.bendablelong.BendableLongScoreHolder;
import com.kairos.planning.domain.*; 
global BendableLongScoreHolder scoreHolder;
//****************Hard constraints*************
rule "Skill requirements"
salience 20
    when
        Task( (missingSkillCount > 0 && $missingSkillCount : missingSkillCount))
    then
        scoreHolder.addHardConstraintMatch(kcontext,0,  - $missingSkillCount);
end
rule "tasksChain for time"
salience 15
    when
        $task: Task (previousTaskOrVehicle instanceof Task  && $prevTask:previousTaskOrVehicle && !$task.isAfter((Task)$prevTask))
    then
        scoreHolder.addHardConstraintMatch(kcontext,1,- 10);
end
rule "Employee availability"
salience 10
    when
        $task:Task(vehicle!=null &&  vehicle.getEmployee()!=null&& !canAssignedEmployeeWork())
    then
        scoreHolder.addHardConstraintMatch(kcontext,2,  - ($task.getDurationIncludingArrivalTime()));
end
rule "Employee Reach Back"
salience 10
    when
        $task:Task(vehicle!=null &&  vehicle.getEmployee()!=null&& !canAssignedEmployeeReachBack())
    then
        scoreHolder.addHardConstraintMatch(kcontext,3,  - ($task.getTimeToReachBackUnit()));
end
rule "Vehicle Un-assigned"
salience 5
    when
        Task(vehicle==null)
    then
        scoreHolder.addHardConstraintMatch(kcontext,4,  - 1);
end
rule "Employee Un-assigned"
salience 5
    when
        Task(vehicle!=null &&  vehicle.getEmployee()==null)
    then
        scoreHolder.addHardConstraintMatch(kcontext,5,  - 1);
end



//****************Soft constraints*************




rule "distanceToPreviousTaskLocation"
salience 3
    when
        $task : Task(previousTaskOrVehicle != null, $distanceFromPreviousTaskOrVehicle : distanceFromPreviousTaskOrVehicle)
    then
        scoreHolder.addSoftConstraintMatch(kcontext,1,- $distanceFromPreviousTaskOrVehicle);
end
rule "AllVehicleUsage"
salience 1
    when
    Task ($vehicle : vehicle)
    accumulate(
            $task : Task(
                vehicle == $vehicle);
            $totalVehicleUsed : count($task);
            $totalVehicleUsed == 0
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext,2, -1);
end